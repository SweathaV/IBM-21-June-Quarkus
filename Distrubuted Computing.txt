MicroServices:
.............

Distributed Computing:


What is Distributed Computing?

Distributed computing (or distributed processing) is the technique of linking together multiple computer servers over a network into a cluster, to share data and to coordinate processing power. Such a cluster is referred to as a â€œdistributed system.


Application: 

1.Data
2.How to process data
3.How to store data
4.How to display data - User Interfaces

Pl: represent,process,store,prepare data.

PL used to build application, it was packed into one single package.

Layers

1.Service - Biz logic
2.DataSource -  connectors to connect databases
3.Presentation  -UI

Types of Distributed?

1.Main frame based
   -Data access logic / Data sources
   -biz logic 
every thing kept inside one single maiframe
thin 
  clients - having small software which connects main frameworks

client -server 

  Server will hold data only -data source/database
  Client will hold biz logic + UI

Tier /layered client- server model
......................................

 -single tier
   Server will hold data only -data source/database
   Client will hold biz logic

 -two tier client-server
    server will have biz logic and data
    clients will have only user interfaces

 - three tier client-server arch 
      
     server will have biz logic   : App Servers
     Server will have data  :Database Servers
     client will have biz logic - user interface  +biz logic  
.............................................................LAN/MAN Based

 N tier client-server arch : Web - Internet Oriented

1989 - AT CERN - To distribute Documents over internet.

Documents: Collection of Information :Information is nothing but collection of data.

Web Tech Products:
-HTML
-WebServer
-line mode browser 
-HTTP

1989 -1995   -- Static web

1996  - Dynamic content Generation Technologies

How to use web as "Biz System"

1.CGI - COmmon Gate Way interface -  c / perl

2.SUN - J2EE Spec

3.MicroSoft - ASP


Dynamic content Generation Technology and Java:
...............................................

In DCG Technoloy: Application was broken into layers:On what basis you can break app.

N-Tier Arch: java-J2EE Tech

MVC - Model(data) ,View(Presentation)- C-Controller  + Data Processing Layer(Service) + Data Access Layer(DAO).

DOMAIN:
.......

OrderManagement System

In olden days , people though Technology FIRST - JAVA/J2EE : Monolithic

Waterflow : 

Team: OMS - PM- More PLS
1. DEV
2. TESTING
3. RELEASE
4. OPERATIONS

1.Req
2.Design
   High Level-UML,Database
   Low level - Runtime,databases,tools......
3.coding

-Vendor-lock in : Mono-lithic
   -DEV,TESTING,PRODUCTION.
-Work flow is highly sequencial
   Req -Complete
   Dev
   testing
   Release
   Production
  Delay in delivery:Cost increased
-Production cost was huge

 Data Centers
 -need to purchase high powered servers - bare metal servers
 
Cost:
   -Hardware
   -OS -Linux-Ubuntu
   -Tools -Servers,databases etc....
   -Matrix Hell -  Mapping software components in dev and Production..

How to build enterprise jee based app.

App  must support a variety of different clients including desktop browsers. 

The application might also expose an API for 3rd parties to consume.

It might also integrate with other applications via a message broker. 

The application handles requests (HTTP requests and messages) by executing business logic; 

accessing a database; 

exchanging messages with other systems;

and returning a HTML/JSON/XML response. 

There are logical components corresponding to different functional areas of the application.

............................................................................................

IF App needs to talk to external systems like Message Brokers, other Systems like Main frameMain frameworks.

RPC/RPI
MOM
Connectors Arch.

BIZ LOGIC:

1- Service Layer : isloate service layer into separate component

 can be inside one app - one layer, that layer may run on different jvms -  distributed Arch.


Layer :

 Client ---- Web Layer  ----Service Layer ---- Repository Layer

Packaging Model:
 
WAR - Web archive
EAR .

Problems with Single JAR/WAR:

1. Scalability
 Vertical scablitity
 Horzitional scability 

2.Deployments
    -Bare Metal Deployment

*********************************************************************************************
Any system, you need to think DOMAIN FIRST - PROBLEMS Oriented Design:MicroService

DOMAIN DRIVEN DESIGN.
 Bounded Context: Natural Language  way of expressing  Problems

 Craft a language to crisply express a set of problems and their solutions at all levels from domain expert discussions through code.

Bounded Context ===Subdomain===Organization

Agile
  _parallel dev, relase,Dev

Team :
 Multi SubDomains
 For each domain
    -pm,pls,dev,tester,operations(devops),release,production.

OrderManagement

 -Orders 

 -Product

 -Inventory

 -Billing

Technology Stack.
  
  You can select any technology or frameworks,libs for each domains

  Orders 
    -Java , Mongodb

  Billing
    -C# , MySql
 
Testing Stack could be any thing.

............................................................................................

Automation: CI AND CD

Automation must be every where.

 From Dev to Production, must be automated


Deployment:

In Premises
 - bare
 -vms
 -containers

Cloud Deployment
  -vms
  -containers
/////////////////////////////////////////////////////////////////////////////////////////////
                                  Micro Services Design Pattern


Implementation Patterns:
........................

1.DOMAIN Models
  Decompose by biz features
  Decompose by sub domains

2.Devlopment
  -Object oriented Design
   Class
      -Represent something in domain eg :Order,Customer
   Service
     -Offerings : giving something to somebody.
   A Program offers something - Data

   Services can be broken into smllar and smallar based on domains
   Telecom domain :
       Telecommunication Services
		-Data Service
			- Mobile data
			- Broad Band
			    -Fiber
                            -leased Line
    
    
    FiberOpticService
        -getSpeed - 
        -increaseSpeed-
        -getNewConnection-
        -disconnectExisingConnection() 
        -payBills()    

   BillingService
	generateBill
	processPayment
	sendBill
        adjustBill
  
   How to design a Service? 
	USING SOLID Principles

  Single-responsibility principle -SRP
/////////////////////////////////////////////////////////////////////////////////////////////

Service Communications:
 
   Two Domains are going to collbrate each other to carry a biz transaction.


In Micro Services


FiberOpticService
     is 
   Running 
     inside
 One Application
       |
     Runtime
       |
  VM -Container

      OS
 
     |
     |   data
     |

Billing is Running
     is 
   Running 
     Another
 One Application
      |
     Runtime
       |
  VM -Container

      OS

Class ----will be come  Objects

Object Communication === Service Communication

-SAME JVM(Runtime)
  Calling methods from one object(FiberDataService) to another object (BillingService).
-Different Runtime(JVM)
   -Networks - Protocals
    RestFull
      -HTTP 
   -RPC/RIP
	-ORB
        -RMI
        -gRpc
   -MOM - Message Brokers
        RabbitMQ
	Kaffka
	etc...
   -Event Bus
	-TCP
	
/////////////////////////////////////////////////////////////////////////////////////////////

Sevices Are Eagar or Lazy:
.........................
 

Eagar Service expects data immediatly.

Service waits for data until it is received.The service cant continue other jobs ; 

Sync Services

Drawbacks:

- Blocking 
    It leads performance issues

Service does not wait for data until it is received.The service t continue other jobs ; 

Async Services

Advantages
 - Non Blocking
    
Async Services Implementation:
..............................

Two ways:

1.Programmetic level 
    -Netty,webflux,Quarkus

2.Via Message Brokers
    RabbitMQ,Kafka

///////////////////////////////////////////////////////////////////////////////////////////

Service Failures:
.................

1.UnAvailability

2.Timeout due to slow calls

How to handle failures , how to return proper response to caller?

Reliability Design patterns :fault tolerance 

 -Circuit Breaker
 -Bulk Head
 -Rate Limiter
 -Retry
 -TimeLitmiter
 -Cache

///////////////////////////////////////////////////////////////////////////////////////////

Service Communications in network and its Problems:
...................................................

Services are going to talk each other.

If they want to talk, What services should know each other?

 -Location
     ip address

In monolithic(traditional) deployment - ip address , ports are well known (hardcoded)
but in containers/ cloud env which are highly dynamic.

Where Micro services typically runs in a virtualized or containerized envs , locations are highly.

Services need to be registered some where and others services will ask registered location, that , hey give me that service

Service Registry and Discovery Pattern:
.......................................
Service Registry:
  -database - stores service informations

Service Discovery:
  locating services from the service registry

Types of Service discovery:
 -Client Side Service Discovery
 -Server Side Service Discovery
.............................................................................................

Data Management :

 A Service need to store data in data sources - Database
  
Database Per Service.

 FiberOpticService
Each service has its own schema. 
you can have more than one tables per service

Database: 
  Collection of tables,views,other objects

Shared Database:
  Sharing db for more than one services .


Service Communication and Data Management

How to implement Transactions In Microservices?

It is very very difficult to implement and track transactions across multiple services.

Transactional Designpattern:

1.2PC  - 2 Phase Commit

2.Saga
    -EDA - Event Driven Architectures
  Saga Implementation
	-Choreography
        -Orchestration
 
 
















































