					Quarkus
//////////////////////////////////////////////////////////////////////////////////////////////
What is Quarkus?
  Quarkus is a framework to built on the top of Various java and JEE Standards.
  Quarkus has been designed to run on Multi platforms efficiently.
    -Bare Metal Machine
    -Containers
    -Cloud Native Env

    "A Kubernetes Native Java Stack tailored for OpenJDK ,Hotspot and GrallVM"


Quarkus:

 built on various standards. JEE , MicroProfile.


Java And JEE Standards:

Java Community Process , is non profitable organization who standardize and provides set of 
spec related java and jee technologies.

The JCP is the mechanism for developing standard technical specifications for Java technology


JCP offers Three Stands

1.JSE - Java Standard Edition
  -Java language Spec
  -Java VM Spec


2.JEE - Java Enterise Edition
 The Java Enterprise Edition offers APIs and tools for developing multitier enterprise applications.

 -Application Development Specs
    JPA Spec  - Vendor netural ORM Solutions
    JSON Binding - JSON-B  
    Java Servlet 
    JAX-RS - Building Resfull API
    JAX-WS - Building xml based webservices -SOAP Webservices
    Bean Validation
    JTA  - Java Transaction API
 -Container Specs 
    How to create Enterprise grade applications

3.JME - Java Micro Edition

Why JEE Spec failed In Modern Computing?
  
   JEE Spec was developed to build traditional Monolothic distributed,transactional, secure  Applications


What if i want to use JEE Spec for building Microservices?

 i cant use JEE Spec directly.

Birth of Project called MicroProfile

MicroProfile

Optimizing Enterprise Java - JEE for a Microservices Architecture.


Micro Profile addresses the need for enterprise java microservices.

It is set of secifications for handling microservices design patterns. 

MicroProfile enables JEE Developers to leverage their existing skill set while shifiting
their focus from traditional monolithic applications to Micro Services


MicroProfile is just collections of MicroServices Service Patterns on JEE standards


Implmentations:

1.Quarkus
etc...

MicroProfile Specs:

1.JAX-RS - To create HTTP based Microservices-
2.CDI - Context Dependency Injection - DI - Beans
3.JSON-B
4.Configuration
5.Falut
6.Health
etc....

Quarkus is built on top of various projects and standards


Quarkus Internal Architecture:

What is quarkus runtime?

How to run java apps?

 Java App
    |
  JVM
   |
  OS

Container:

 Java App
    |
  JVM
   |
 Linux
   |
 Docker Engine
   |
 os


Can we Run java apps without JVM ? Can We run java apps on native platforms?

 Java App
   |
  Linux

 Java App
   |
 Windows

 Java App
   |
  Mac

-Performance is higher. Why we need? because apps are running in cloud, we need less memory
and cpu power .

-Down time , apps are running in scalable , dynamic clusters of machines.

How to reduce boot time in containerisized env?

Container:

 Java App
    |
    |
  Linux
   |
 Docker Engine
   |
  os

s.o.p---jvm- java api--- c api--jni -----os api------|kern--dv---

javac ---byte code ----grallvm---convert this byte eq- native code at build time.

s.o.p ---os call
/////////////////////////////////////////////////////////////////////////////////////////////

Software Req:

1.GrallVm
............ 
2.jdk 11
3.maven/gradle
4.IntelliJ idea / vs code
5.Docker

/////////////////////////////////////////////////////////////////////////////////////////////

Quarkus : First App


how to use Maven as a build tool
how to create and scaffold a new project
how to deal with extensions
how to enable live reload
how to develop your application in your IDE
how to compile your application natively
how to setup Quarkus tools in Visual Studio Code, Eclipse IDE, Eclipse Che and IntelliJ


Project creations

Way -1

mvn io.quarkus:quarkus-maven-plugin:1.13.7.Final:create \
    -DprojectGroupId=my-groupId \
    -DprojectArtifactId=my-artifactId \
    -DprojectVersion=my-version \
    -DclassName="org.my.group.MyResource"


Way-2 
mvn io.quarkus:quarkus-maven-plugin:1.13.7.Final:create 


Way-3
https://code.quarkus.io/

Way -4 
 via Intellij idea plugins


////////////////////////////////////////////////////////////////////////////////////////////

Running Quarkus :

1.Dev
2.Test
3.Production

Dev:
 ./mvnw compile quarkus:dev - linux /mac

 mvnw compile quarkus:dev  - windows

 mvn compile quarkus:dev

Dev features;

-Live coding Reloading
   if write code and save and referesh your browser / any tool


How to build native image in quarkus

-Quarkus is not using GrallVM directly to build native image rather which uses mandral project
to convert Quarkus apps into native apps.

mvnw package -Pnative
    will convert current quarkus app into native binary.

how to package quarkus app/ fat jar /uber jar

./mvn clean package -DskipTests=true

$java -jar target/quarkus-app\quarkus-run.jar

////////////////////////////////////////////////////////////////////////////////////////////

Creating a linux executable without grallvm installed

 Via Docker , Podman(for linux only)

In windows:
   Docker file sharing settings must have been enabled.

 Way 1 : using command

mvnw package -Pnative  -Dquarkus.native.container-build=true  -Dquarkus.native.container-runtime=docker
   it will lookup in local machine whether docker is installed not 

 Way 2: using Docker file

 Steps:

  Your App -----Produce Native Image-----Executable---->Containerize it --->Container Image

 Once Image ready. You can lanuch

Steps:

Build Image:
docker build -f src/main/docker/Dockerfile.native -t quarkus-quickstart/getting-started .

Run it:
docker run -i --rm -p 8080:8080 quarkus-quickstart/getting-started

///////////

Native Image Can be built 

-Real Operating System using GrallVm setup

-From any operating System using Docker Container


&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Rest api Development

-JAX-RS Spec
  -RestEasy
-Servers
   Embeded Server
    -Netty

////////////////////////////////////////////////////////////////////////////////////////////////

JAX-RS :


Concepts :

1.Resource;

 It is class represents Restfull Resources.
@Path

                                  JAX-RS Implementation


Any one can implement Jax-RS spec.

1.RESTEasy
2.Jersy
etc...

RESTEasy
   FRAMWORK implements jax rs spec
RESTEasy is a JBoss / Red Hat project that provides various frameworks to help you build RESTful Web Services and RESTful Java applications.
It is an implementation of the Jakarta RESTful Web Services, an Eclipse Foundation specification that provides a Java API for RESTful Web Services over the HTTP protocol.
Moreover, RESTEasy also implements the MicroProfile REST Client specification API.


Lab : How to represent resources:
.................................

package org.ibm;

import javax.ws.rs.*;
import javax.ws.rs.core.MediaType;

@Path("/product")
public class ProductResource {

    @GET
    @Produces(MediaType.TEXT_PLAIN)
    public String findAll() {
        return "Product findAll";
    }

    @POST
    @Consumes(MediaType.TEXT_PLAIN)
    public void create(String product) {
        System.out.println(product);
    }

    @PUT
    @Consumes(MediaType.TEXT_PLAIN)
    public String update(String product) {
        return product + "Updated";
    }

    @DELETE
    public void remove() {
        System.out.println("Product deleted");
    }
}

Parameters:

@MatrixParam Extracts the value of a URI matrix parameter.
@QueryParam Extracts the value of a URI query parameter.
@PathParam Extracts the value of a URI template parameter.
@CookieParam Extracts the value of a cookie.
@HeaderParam Extracts the value of a header.
@Context Injects an instance of a supported resource

package org.ibm;

import javax.ws.rs.*;
import javax.ws.rs.core.MediaType;

@Path("/product")
public class ProductResource {

    @GET
    @Produces(MediaType.TEXT_PLAIN)
    public String findAll() {
        return "Product findAll";
    }

    @GET
    @Path("/{productId}")
    @Produces(MediaType.TEXT_PLAIN)
    public String getProductById(@PathParam("productId") String id) {
        return id;
    }

    // http://localhost:8080/product/filter?category=sports
    @GET
    @Produces(MediaType.TEXT_PLAIN)
    @Path("/filter")
    public String filterProductByCategoriees(@QueryParam("category") String category){
        System.out.println("");
        return category;
    }

    @POST
    @Consumes(MediaType.TEXT_PLAIN)
    public void create(String product) {
        System.out.println(product);
    }

    @PUT
    @Consumes(MediaType.TEXT_PLAIN)
    public String update(String product) {
        return product + "Updated";
    }

    @DELETE
    public void remove() {
        System.out.println("Product deleted");
    }
}

How to access "Servlelt like OBjects" inside Rest End Points

javax.ws.rs.core.HttpHeaders
javax.ws.rs.core.UriInfo
javax.ws.rs.core.Request
javax.servlet.http.HttpServletRequest
javax.servlet.http.HttpServletResponse
javax.servlet.ServletConfig
javax.servlet.ServletContext
javax.ws.rs.core.SecurityContext


package org.ibm;

import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.HttpHeaders;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.UriInfo;

@Path("/containerinfo")
public class ContainerResources {

    @Produces(MediaType.TEXT_PLAIN)
    @GET()
    @Path("/urls")
    public String getUriInfo(@Context UriInfo uriInfo) {
        System.out.println(uriInfo.getAbsolutePath() + " " + uriInfo.getRequestUri());
        return "Url Information";
    }

    @Produces(MediaType.TEXT_PLAIN)
    @GET()
    @Path("/headers")
    public String getHeaders(@Context HttpHeaders headers) {
        System.out.println(headers.getRequestHeaders());
        return "headers Information";
    }
}
////////////////////////////////////////////////////////////////////////////////////////////

Return Type of API:

 - String
 - Objects
 - Void
 - Response

Response;

 Object used to send "payload-data" along with meta data (http code,otherinformation)

HTTP Status codes:

-> informational response - 100 to 199
-> success response -  200-299
-> Redirects  - 300-399
-> client errors - 400-499
-> server errrors - 500-599

Response Builder:

 Response.ResponseBuilder is inner class of Response used to build response Objects.
  
Response  = payload  + meta data(headers,options)
            entity


package org.ibm;

import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.HttpHeaders;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.UriInfo;

@Path("/containerinfo")
public class ContainerResources {

    @Produces(MediaType.TEXT_PLAIN)
    @GET()
    @Path("/urls")
    public String getUriInfo(@Context UriInfo uriInfo) {
        System.out.println(uriInfo.getAbsolutePath() + " " + uriInfo.getRequestUri());
        return "Url Information";
    }

    @Produces(MediaType.TEXT_PLAIN)
    @GET()
    @Path("/headers")
    public String getHeaders(@Context HttpHeaders headers) {
        System.out.println(headers.getRequestHeaders());
        return "headers Information";
    }
}
//////////////////////////////////////////////////////////////////////////////////////////////

How to send JSON Response?

Quarks cant convert any object into JSON by default with help of "RestEasy" extension

 GET /developer/list: org.jboss.resteasy.core.NoMessageBodyWriterFoundFailure: Could not find MessageBodyWriter for response object of type: org.ibm.entity.Developer of media type: application/json

Why because we are missing serilizer and desserializer - JSON Converter not there.
  

Dealing with extensions	:
 
Extensions are libs. which can be added dynamically when you develop app


./mvnw quarkus:list-extensions

  To list available supported extsions.

./mvnw quarkus:add-extension -Dextensions="resteasy-jsonb"

Eg for RestEasy Extensions:

RESTEasy Jackson                                   quarkus-resteasy-jackson
RESTEasy JAXB                                      quarkus-resteasy-jaxb
RESTEasy JSON-B                                    quarkus-resteasy-jsonb
RESTEasy Multipart                                 quarkus-resteasy-multipart
RESTEasy Mutiny                                    quarkus-resteasy-mutiny
RESTEasy Qute                                      quarkus-resteasy-qute
RESTEasy Reactive Jackson                          quarkus-resteasy-reactive-jackson
RESTEasy Reactive JSON-B                           quarkus-resteasy-reactive-jsonb
RESTEasy Reactive Qute                             quarkus-resteasy-reactive-qute
RESTEasy Reactive                                  quarkus-resteasy-reactive
RESTEasy JAX-RS                                    quarkus-resteasy


package org.ibm;

import org.ibm.entity.Developer;

import javax.ws.rs.*;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.UriBuilder;

@Path("/developer")
public class DeveloperResource {

    @POST
    @Path("/create")
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    public Response createDeveloper(Developer developer) {
        developer.persist();
        System.out.println(developer);
        ///developer/1 = UriBuilder.fromResource().
        return Response.created(UriBuilder.fromResource(DeveloperResource.class).path("/create/" + Long.toString(developer.getId())).build())
                .entity(developer)
                .header("dev", developer.getName())
                .build();
    }

    @Path("/list")
    @GET
    @Produces(MediaType.APPLICATION_JSON)
    public Response getDeveloper() {
        Developer developer = new Developer();
        developer.setName("Subramanian");
        developer.persist();
        return Response.ok().entity(developer).build();
    }

}

//////////////////////////////////////////////////////////////////////////////////////

How handle Exceptions, How to send error Responses


package org.ibm;

import javax.ws.rs.*;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.ext.ExceptionMapper;
import javax.ws.rs.ext.Provider;

@Path("/customer")
public class CustomerResource {

    @GET
    @Path("/{customerId}")
    @Produces(MediaType.TEXT_PLAIN)
    public Response getCustomerId(@PathParam("customerId") String id) {

        if (id.equals("abc")) {
            throw new WebApplicationException("Element with position " + id + " does not exist.", 404);
        }
        //biz if this failed throw new YourBizException("Something went wrong in my biz")
        return Response.ok(Integer.parseInt(id)).build();
    }

    @Provider
    public static class WebApplicationErrors implements ExceptionMapper<WebApplicationException> {
        @Override
        public Response toResponse(WebApplicationException e) {
            //return Response.status(500).entity(e.getMessage()).build();
            return Response.status(Response.Status.BAD_GATEWAY).entity(e.getMessage()).header("err", "myerr").build();
        }
    }

    @Provider
    public static class CustomerExceptionMapper implements ExceptionMapper<Exception> {
        @Override
        public Response toResponse(Exception e) {
            //return Response.status(500).entity(e.getMessage()).build();
            return Response.status(Response.Status.BAD_GATEWAY).entity(e.getMessage()).header("err", "myerr").build();
        }
    }

}

}
////////////////////////////////////////////////////////////////////////////////////////////

Configuration:
.............
- How to configure a Quarkus service
- How to inject configuration parameters in the service
- How to apply values depending on the environment
- How to correctly configure the logging system
- How to create customizations for the configuration system


configuration has been implemented using MicroProfile config 2.0 spec
 https://github.com/eclipse/microprofile-config/releases/tag/2.0

configuration naming conventions:
.................................
This is similar to Java package namespacing.
because java packages are unquie

resources/application.properties

com.acme.myproject.someserver.url = http://some.server/some/endpoint
com.acme.myproject.someserver.port = 9085
com.acme.myproject.someserver.active = true
com.acme.other.stuff.name = Karl
com.acme.myproject.notify.onerror=karl@mycompany,sue@mcompany
some.library.own.config=some value

application.properties

How to supply configuration parameters to the application.

Syntax:

domain.message=value



application.properties

#Your App configuration
greeting.message = Hai
greeting.name = Subramanian
greeting.from = quarkus

package org.ibm;

import org.eclipse.microprofile.config.inject.ConfigProperty;

import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.core.Response;

@Path("/config")
public class ConfigResource {

    //inject configuration values
    @ConfigProperty(name = "greeting.message")
    String message;
    @ConfigProperty(name = "greeting.name")
    String name;
    @ConfigProperty(name = "greeting.from")
    String from;
    @ConfigProperty(name = "greeting.suffix", defaultValue = "!")
    String suffix;

    @Path("/greet")
    @GET
    public Response getGreeting() {
        return Response.ok().entity(message + name + "from " + from + " " + suffix ).build();
    }
}


Does Quarkus Supports Yaml Formats ?

Yes
./mvnw quarkus:add-extension -Dextensions="config-yaml"

You can mix both files

application.yml

greeting:
  message: Hello Yaml


package org.ibm;

import org.eclipse.microprofile.config.inject.ConfigProperty;

import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.core.Response;

@Path("/config")
public class ConfigResource {

    //inject configuration values
    @ConfigProperty(name = "greeting.message")
    String message;
    @ConfigProperty(name = "greeting.name")
    String name;
    @ConfigProperty(name = "greeting.from")
    String from;
    @ConfigProperty(name = "greeting.suffix", defaultValue = "!")
    String suffix;

    @Path("/greet")
    @GET
    public Response getGreeting() {
        return Response.ok().entity(message + name + "from " + from + " " + suffix ).build();
    }
}


# Accessing Configuration Properties Programmatically

You want to access configuration properties programmatically instead of injecting
them using the org.eclipse.microprofile.config.inject.ConfigProperty
annotation.


Inject the org.eclipse.microprofile.config.Config class in the object for which
you want to access properties programmatically.

The Eclipse MicroProfile Configuration spec allows you to inject org.eclipse.micro
profile.config.Config to get properties programmatically instead of injecting
directly with ConfigProperty.

After dicussion with CDI



# Overwriting Configuration Values Externally

You want to overwrite any configuration value at runtime.

Quarkus lets you overwrite any configuration property by setting a configuration
as a system property (-Dproperty.name=value) and/or as an environment variable
(export PROPERTY_NAME=value). 


System properties have more priority than environment
variables.


./mvnw clean package -DskipTests


>java -Dgreeting.message=Aloha -Dgreeting.name=John -jar target/quarkus-app/quarkus-run.jar


# Configuring with Profiles

You want to overwrite configuration values depending on the environment in which
you are running Quarkus.

Quarkus supports the notion of configuration profiles.

These allow you to have multiple configuration values for the same property in the same file and enable different values to suit the environment in which you are running the service.


The syntax for configuration profiles is %{profile}.config.key=value.

Types of built-in profiles

dev
test
prod

Open src/main/resources/application.properties file and set to start Quarkus at port
8181 in development mode:

%dev.quarkus.http.port=8181


./mvnw compile quarkus:dev

/////////////////////////////////////////////////////////////////////////////////////////////

                                                                 Property Sources
   Your App
   application.properties                                      1.application.properties | Yaml
     foo.myvalue=bar
                                                               2. Env variables                
							       3. command line args 
    @ConfigProperty(name="foo.somepro",defaultValue="") |->    4. External servers
    myVariable                                          |


/////////////////////////////////////////////////////////////////////////////////////////////

Types of COnfiguration:

1.Application information configurations
   if you want to supply application spefic congfig
   messages, names, etc......

2.Application infrastructure configurations
 
   HTTP server configurations.

   Data Source Configurations

   ORM Configurations -Hibernate

   etc.....

All infra config starts with

 quarkus.
https://quarkus.io/guides/all-config
 
..............................................................................................
                                       Thread Management

NonBlocking:

 Quarkus Http Engine is non blocking.

How traditional Web Servers working?


Blocking IO:

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;

public class CopyBytes {
    public static void main(String[] args) throws IOException {

        FileInputStream in = null;
        FileOutputStream out = null;

        try {
            in = new FileInputStream("xanadu.txt");
            out = new FileOutputStream("outagain.txt");
            int c;

            while ((c = in.read()) != -1) {
                out.write(c);
            }
        } finally {
            if (in != null) {
                in.close();
            }
            if (out != null) {
                out.close();
            }
        }
    }
}
/////////////////////////////////////////////////////////////////////////////////////////////


.class           JNI(c layer)           Linux OS            Kernal
in.read()-------->read()----sys call(c) read() ------>   File Descriptor    DD
                                                           read : ### ------|-----|DEVICE

FD :
 MAP

Key - value
0   - Keyboard         resoucers
1   - Monitor
2   - Monitor
................

Kernal

for(;;){
   iterate fd
   0 -key ----- checks any data
   1 - m --- ----- checks any data
   2 - m --- ----- checks any data
   3 - networksocket --- ----- checks any data
   4 -networksocket --- ----- checks any data  - yes- copy data into buffer|---OK(EVENT)----|Inform---User Space----|ApplicationRuntime----process data.
   5 -filesystem----- ----- checks any data
}

Event loop is a infinte for loop keep on spins for watching any one of the file descriptor for 
"data".


Quarkus uses Vertx Event loop architecture for handling non blocking HTTP Server handling processing:

Every req in Quarkus is delegated to Vert.x event loop thread.

Vert.x uses more threads , generally per cpu core - 2 threads :  if 12 cores, 24 threads






